// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlueRoom.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210407011308_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArtistExternalMediaObject", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("int");

                    b.Property<int>("ExternalMediaObjectsId")
                        .HasColumnType("int");

                    b.HasKey("ArtistsId", "ExternalMediaObjectsId");

                    b.HasIndex("ExternalMediaObjectsId");

                    b.ToTable("ArtistExternalMediaObject");
                });

            modelBuilder.Entity("Entities.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ArtistId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShowId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Entities.Models.ExternalMediaObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExternalMediaObjectId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SongId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeMediaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("TypeMediaTypeId");

                    b.ToTable("ExternalMediaObject");
                });

            modelBuilder.Entity("Entities.Models.Locale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocaleId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locale");
                });

            modelBuilder.Entity("Entities.Models.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MediaTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaTypeId");

                    b.ToTable("MediaType");
                });

            modelBuilder.Entity("Entities.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NoteId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Entities.Models.SetNumber", b =>
                {
                    b.Property<int>("SetNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FullSet")
                        .HasColumnType("bit");

                    b.Property<int>("SetIndex")
                        .HasColumnType("int");

                    b.Property<string>("SetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SetNumberId");

                    b.ToTable("SetNumber");
                });

            modelBuilder.Entity("Entities.Models.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShowId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PerformingArtistId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerformingArtistId");

                    b.HasIndex("VenueId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("Entities.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SongId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginalArtistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OriginalArtistId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Entities.Models.SongPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SongPerformanceId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("MediaLinkId")
                        .HasColumnType("int");

                    b.Property<int>("SetNumberId")
                        .HasColumnType("int");

                    b.Property<int>("SetSongIndex")
                        .HasColumnType("int");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaLinkId");

                    b.HasIndex("SetNumberId");

                    b.HasIndex("ShowId");

                    b.HasIndex("SongId");

                    b.ToTable("SongPerformance");
                });

            modelBuilder.Entity("Entities.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VenueId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocaleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("ExternalMediaObjectShow", b =>
                {
                    b.Property<int>("ExternalMediaObjectsId")
                        .HasColumnType("int");

                    b.Property<int>("ShowsId")
                        .HasColumnType("int");

                    b.HasKey("ExternalMediaObjectsId", "ShowsId");

                    b.HasIndex("ShowsId");

                    b.ToTable("ExternalMediaObjectShow");
                });

            modelBuilder.Entity("NoteShow", b =>
                {
                    b.Property<int>("NotesId")
                        .HasColumnType("int");

                    b.Property<int>("ShowsId")
                        .HasColumnType("int");

                    b.HasKey("NotesId", "ShowsId");

                    b.HasIndex("ShowsId");

                    b.ToTable("NoteShow");
                });

            modelBuilder.Entity("NoteSongPerformance", b =>
                {
                    b.Property<int>("NotesId")
                        .HasColumnType("int");

                    b.Property<int>("SongPerformancessId")
                        .HasColumnType("int");

                    b.HasKey("NotesId", "SongPerformancessId");

                    b.HasIndex("SongPerformancessId");

                    b.ToTable("NoteSongPerformance");
                });

            modelBuilder.Entity("ArtistExternalMediaObject", b =>
                {
                    b.HasOne("Entities.Models.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ExternalMediaObject", null)
                        .WithMany()
                        .HasForeignKey("ExternalMediaObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.Show", "Show")
                        .WithMany("Comments")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Entities.Models.ExternalMediaObject", b =>
                {
                    b.HasOne("Entities.Models.Song", null)
                        .WithMany("ExternalMediaObjects")
                        .HasForeignKey("SongId");

                    b.HasOne("Entities.Models.MediaType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeMediaTypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Entities.Models.Show", b =>
                {
                    b.HasOne("Entities.Models.Artist", "PerformingArtist")
                        .WithMany("Shows")
                        .HasForeignKey("PerformingArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Venue", "Venue")
                        .WithMany("Shows")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformingArtist");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Entities.Models.Song", b =>
                {
                    b.HasOne("Entities.Models.Artist", "OriginalArtist")
                        .WithMany("OriginalSongs")
                        .HasForeignKey("OriginalArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalArtist");
                });

            modelBuilder.Entity("Entities.Models.SongPerformance", b =>
                {
                    b.HasOne("Entities.Models.ExternalMediaObject", "MediaLink")
                        .WithMany("SongPerformances")
                        .HasForeignKey("MediaLinkId");

                    b.HasOne("Entities.Models.SetNumber", "SetNumber")
                        .WithMany()
                        .HasForeignKey("SetNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Show", "Show")
                        .WithMany("SongPerformances")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Song", "Song")
                        .WithMany("SongPerformances")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaLink");

                    b.Navigation("SetNumber");

                    b.Navigation("Show");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Entities.Models.Venue", b =>
                {
                    b.HasOne("Entities.Models.Locale", "Location")
                        .WithMany("Venues")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ExternalMediaObjectShow", b =>
                {
                    b.HasOne("Entities.Models.ExternalMediaObject", null)
                        .WithMany()
                        .HasForeignKey("ExternalMediaObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Show", null)
                        .WithMany()
                        .HasForeignKey("ShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShow", b =>
                {
                    b.HasOne("Entities.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Show", null)
                        .WithMany()
                        .HasForeignKey("ShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteSongPerformance", b =>
                {
                    b.HasOne("Entities.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.SongPerformance", null)
                        .WithMany()
                        .HasForeignKey("SongPerformancessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Artist", b =>
                {
                    b.Navigation("OriginalSongs");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("Entities.Models.ExternalMediaObject", b =>
                {
                    b.Navigation("SongPerformances");
                });

            modelBuilder.Entity("Entities.Models.Locale", b =>
                {
                    b.Navigation("Venues");
                });

            modelBuilder.Entity("Entities.Models.Show", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SongPerformances");
                });

            modelBuilder.Entity("Entities.Models.Song", b =>
                {
                    b.Navigation("ExternalMediaObjects");

                    b.Navigation("SongPerformances");
                });

            modelBuilder.Entity("Entities.Models.Venue", b =>
                {
                    b.Navigation("Shows");
                });
#pragma warning restore 612, 618
        }
    }
}
