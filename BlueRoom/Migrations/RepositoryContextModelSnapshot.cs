// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlueRoom.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArtistExternalMediaObject", b =>
                {
                    b.Property<Guid>("ArtistsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalMediaObjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtistsId", "ExternalMediaObjectsId");

                    b.HasIndex("ExternalMediaObjectsId");

                    b.ToTable("ArtistExternalMediaObject");
                });

            modelBuilder.Entity("Entities.Models.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("artist");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CommentId");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SetlistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SetlistId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("Entities.Models.ExternalMediaObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExternalMediaObjectId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("external_media_object");
                });

            modelBuilder.Entity("Entities.Models.Locale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LocaleId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("locale");
                });

            modelBuilder.Entity("Entities.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NoteId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("note");
                });

            modelBuilder.Entity("Entities.Models.Setlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SetlistId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PerformingArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PerformingArtistId");

                    b.HasIndex("VenueId");

                    b.ToTable("setlist");
                });

            modelBuilder.Entity("Entities.Models.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SongId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OriginalArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OriginalArtistId");

                    b.ToTable("song");
                });

            modelBuilder.Entity("Entities.Models.SongPerformance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SongPerformanceId");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("MediaLinkId")
                        .HasColumnType("int");

                    b.Property<Guid?>("MediaLinkId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SetIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("SetlistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SetlistSongIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaLinkId1");

                    b.HasIndex("SetlistId");

                    b.HasIndex("SongId");

                    b.ToTable("song_performance");
                });

            modelBuilder.Entity("Entities.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VenueId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.ToTable("venue");
                });

            modelBuilder.Entity("ExternalMediaObjectSetlist", b =>
                {
                    b.Property<Guid>("ExternalMediaObjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SetlistsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExternalMediaObjectsId", "SetlistsId");

                    b.HasIndex("SetlistsId");

                    b.ToTable("ExternalMediaObjectSetlist");
                });

            modelBuilder.Entity("NoteSetlist", b =>
                {
                    b.Property<Guid>("NotesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SetlistsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotesId", "SetlistsId");

                    b.HasIndex("SetlistsId");

                    b.ToTable("NoteSetlist");
                });

            modelBuilder.Entity("NoteSongPerformance", b =>
                {
                    b.Property<Guid>("NotesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SongPerformancessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotesId", "SongPerformancessId");

                    b.HasIndex("SongPerformancessId");

                    b.ToTable("NoteSongPerformance");
                });

            modelBuilder.Entity("ArtistExternalMediaObject", b =>
                {
                    b.HasOne("Entities.Models.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ExternalMediaObject", null)
                        .WithMany()
                        .HasForeignKey("ExternalMediaObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.Setlist", "Setlist")
                        .WithMany("Comments")
                        .HasForeignKey("SetlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setlist");
                });

            modelBuilder.Entity("Entities.Models.ExternalMediaObject", b =>
                {
                    b.HasOne("Entities.Models.Song", null)
                        .WithMany("ExternalMediaObjects")
                        .HasForeignKey("SongId");
                });

            modelBuilder.Entity("Entities.Models.Setlist", b =>
                {
                    b.HasOne("Entities.Models.Artist", "PerformingArtist")
                        .WithMany("SetLists")
                        .HasForeignKey("PerformingArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Venue", "Venue")
                        .WithMany("Setlists")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformingArtist");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Entities.Models.Song", b =>
                {
                    b.HasOne("Entities.Models.Artist", "OriginalArtist")
                        .WithMany("Songs")
                        .HasForeignKey("OriginalArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalArtist");
                });

            modelBuilder.Entity("Entities.Models.SongPerformance", b =>
                {
                    b.HasOne("Entities.Models.ExternalMediaObject", "MediaLink")
                        .WithMany("SongPerformances")
                        .HasForeignKey("MediaLinkId1");

                    b.HasOne("Entities.Models.Setlist", "Setlist")
                        .WithMany("SongPerformances")
                        .HasForeignKey("SetlistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Song", "Song")
                        .WithMany("SongPerformances")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaLink");

                    b.Navigation("Setlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Entities.Models.Venue", b =>
                {
                    b.HasOne("Entities.Models.Locale", "Location")
                        .WithMany("Venues")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ExternalMediaObjectSetlist", b =>
                {
                    b.HasOne("Entities.Models.ExternalMediaObject", null)
                        .WithMany()
                        .HasForeignKey("ExternalMediaObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Setlist", null)
                        .WithMany()
                        .HasForeignKey("SetlistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteSetlist", b =>
                {
                    b.HasOne("Entities.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Setlist", null)
                        .WithMany()
                        .HasForeignKey("SetlistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteSongPerformance", b =>
                {
                    b.HasOne("Entities.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.SongPerformance", null)
                        .WithMany()
                        .HasForeignKey("SongPerformancessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Artist", b =>
                {
                    b.Navigation("SetLists");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Entities.Models.ExternalMediaObject", b =>
                {
                    b.Navigation("SongPerformances");
                });

            modelBuilder.Entity("Entities.Models.Locale", b =>
                {
                    b.Navigation("Venues");
                });

            modelBuilder.Entity("Entities.Models.Setlist", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SongPerformances");
                });

            modelBuilder.Entity("Entities.Models.Song", b =>
                {
                    b.Navigation("ExternalMediaObjects");

                    b.Navigation("SongPerformances");
                });

            modelBuilder.Entity("Entities.Models.Venue", b =>
                {
                    b.Navigation("Setlists");
                });
#pragma warning restore 612, 618
        }
    }
}
